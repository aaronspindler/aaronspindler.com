# Generated by Django 5.2.7 on 2025-10-16 15:07

from django.db import migrations


def remove_index_if_exists(apps, schema_editor):
    """
    Remove the old ip_address index only if it exists.
    This handles the case where the index might not exist in some databases.
    """
    with schema_editor.connection.cursor() as cursor:
        # Check if the index exists
        cursor.execute("""
            SELECT indexname
            FROM pg_indexes
            WHERE tablename = 'utils_requestfingerprint'
            AND indexname = 'utils_reque_ip_addr_b174aa_idx'
        """)

        if cursor.fetchone():
            # Index exists, drop it
            cursor.execute("DROP INDEX IF EXISTS utils_reque_ip_addr_b174aa_idx")
            print("Removed old index utils_reque_ip_addr_b174aa_idx")
        else:
            print("Index utils_reque_ip_addr_b174aa_idx does not exist, skipping removal")


def reverse_remove_index(apps, schema_editor):
    """
    Reverse operation - recreate the old index.
    Note: This is mainly for completeness, unlikely to be needed.
    """
    # We don't need to recreate this index as it was replaced by the new one
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('utils', '0008_add_ip_address_created_at_index'),
    ]

    operations = [
        migrations.RunPython(remove_index_if_exists, reverse_code=reverse_remove_index),
    ]
