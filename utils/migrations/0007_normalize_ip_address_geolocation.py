# Generated by Django 5.2.7 on 2025-10-15 18:49

import django.db.models.deletion
from django.db import migrations, models


def migrate_ip_addresses_forward(apps, schema_editor):
    """
    Migrate IP addresses and geo_data from RequestFingerprint to IPAddress model.

    Creates IPAddress records for each unique IP and links RequestFingerprints to them.
    """
    RequestFingerprint = apps.get_model("utils", "RequestFingerprint")
    IPAddress = apps.get_model("utils", "IPAddress")

    # Get all unique IP addresses from RequestFingerprint
    unique_ips = RequestFingerprint.objects.values_list("ip_address", flat=True).distinct()

    print(f"\nMigrating {len(unique_ips)} unique IP addresses...")

    for ip_str in unique_ips:
        # Get or create IPAddress record
        ip_obj, created = IPAddress.objects.get_or_create(
            ip_address=ip_str,
            defaults={"geo_data": None},
        )

        # Check if any RequestFingerprint for this IP has geo_data
        fingerprint_with_geo = RequestFingerprint.objects.filter(
            ip_address=ip_str, geo_data__isnull=False
        ).first()

        if fingerprint_with_geo and fingerprint_with_geo.geo_data:
            # Copy geo_data to IPAddress record
            ip_obj.geo_data = fingerprint_with_geo.geo_data
            ip_obj.save()

        # Link all RequestFingerprints with this IP to the IPAddress record
        RequestFingerprint.objects.filter(ip_address=ip_str).update(ip_address_new=ip_obj)

    print("IP address migration complete!")


def migrate_ip_addresses_backward(apps, schema_editor):
    """
    Reverse migration: copy geo_data from IPAddress back to RequestFingerprint.
    """
    RequestFingerprint = apps.get_model("utils", "RequestFingerprint")

    print("\nReversing IP address normalization...")

    for fingerprint in RequestFingerprint.objects.select_related("ip_address_new").all():
        if fingerprint.ip_address_new:
            # Copy IP address string back
            fingerprint.ip_address = fingerprint.ip_address_new.ip_address

            # Copy geo_data back if it exists
            if fingerprint.ip_address_new.geo_data:
                fingerprint.geo_data = fingerprint.ip_address_new.geo_data

            fingerprint.save()

    print("Reverse migration complete!")


class Migration(migrations.Migration):

    dependencies = [
        ("utils", "0006_add_geo_data_to_requestfingerprint"),
    ]

    operations = [
        # Step 1: Create IPAddress model
        migrations.CreateModel(
            name="IPAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("ip_address", models.GenericIPAddressField(db_index=True, unique=True)),
                (
                    "geo_data",
                    models.JSONField(
                        blank=True,
                        help_text="Geographic location data for IP address (city, country, lat/lon, etc.)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "IP Address",
                "verbose_name_plural": "IP Addresses",
                "ordering": ["-created_at"],
            },
        ),
        # Step 2: Add temporary new FK field (nullable for migration)
        migrations.AddField(
            model_name="requestfingerprint",
            name="ip_address_new",
            field=models.ForeignKey(
                null=True,
                blank=True,
                help_text="IP address (with shared geolocation data)",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="request_fingerprints",
                to="utils.ipaddress",
            ),
        ),
        # Step 3: Migrate data from old ip_address to IPAddress model
        migrations.RunPython(migrate_ip_addresses_forward, reverse_code=migrate_ip_addresses_backward),
        # Step 4: Remove old fields
        migrations.RemoveField(
            model_name="requestfingerprint",
            name="ip_address",
        ),
        migrations.RemoveField(
            model_name="requestfingerprint",
            name="geo_data",
        ),
        # Step 5: Rename ip_address_new to ip_address and make it required
        migrations.RenameField(
            model_name="requestfingerprint",
            old_name="ip_address_new",
            new_name="ip_address",
        ),
        migrations.AlterField(
            model_name="requestfingerprint",
            name="ip_address",
            field=models.ForeignKey(
                help_text="IP address (with shared geolocation data)",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="request_fingerprints",
                to="utils.ipaddress",
            ),
        ),
    ]
