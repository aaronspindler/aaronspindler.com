name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  PYTHONUNBUFFERED: 1

jobs:
  # Security check - fast and always runs
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: '3.12.2'
          cache: 'pip'
      
      - name: Security scan
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        run: |
          python -m pip install --upgrade pip
          pip install safety
          safety scan --json || true

  # Run tests in Docker
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
      
      - name: Build test image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          file: Dockerfile
          target: web
          push: false
          load: true
          tags: test-runner:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Start services
        run: |
          docker compose -f docker-compose.test.yml up -d postgres redis localstack
          echo "Waiting for services..."
          sleep 10
      
      - name: Setup S3 in LocalStack
        run: |
          docker compose -f docker-compose.test.yml run --rm test_runner sh -c "
            pip install awscli --no-cache-dir &&
            aws --endpoint-url=http://localstack:4566 s3 mb s3://test-bucket || true &&
            aws --endpoint-url=http://localstack:4566 s3api put-bucket-acl --bucket test-bucket --acl public-read || true
          "
      
      - name: Run Django checks
        run: |
          docker compose -f docker-compose.test.yml run --rm test_runner \
            python manage.py check --deploy --settings=config.settings_test
          docker compose -f docker-compose.test.yml run --rm test_runner \
            python manage.py makemigrations --check --dry-run --settings=config.settings_test
      
      - name: Run tests with coverage
        run: |
          mkdir -p ./test_output
          docker compose -f docker-compose.test.yml run --rm \
            -v $(pwd)/test_output:/code/test_output test_runner sh -c "
            pip install coverage --no-cache-dir &&
            coverage run --source='.' manage.py test --settings=config.settings_test --no-input --verbosity=2 --parallel &&
            coverage report &&
            coverage xml -o /code/test_output/coverage.xml
          "
      
      - name: Upload coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7  # v5.5.1
        with:
          files: ./test_output/coverage.xml
          fail_ci_if_error: false
      
      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  # Build and push Docker images (only on main)
  build-and-push:
    needs: [security, test]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - service: web
            target: web
          - service: celery
            target: celery
          - service: celerybeat
            target: celerybeat
          - service: flower
            target: flower
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          file: Dockerfile
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false
          sbom: false
  
  # Deploy to CapRover
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 2
      
      - name: Check for Flower changes
        id: flower-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '(Dockerfile|requirements\.txt|config/celery\.py|captain-definition-flower)'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy Web
        continue-on-error: true
        run: |
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_WEB_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_WEB_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-web:latest"
      
      - name: Deploy Celery
        continue-on-error: true
        run: |
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_CELERY_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_CELERY_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-celery:latest"
      
      - name: Deploy Celery Beat
        continue-on-error: true
        run: |
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_CELERYBEAT_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_CELERYBEAT_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-celerybeat:latest"
      
      - name: Deploy Flower
        if: steps.flower-changes.outputs.changed == 'true'
        continue-on-error: true
        run: |
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_FLOWER_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_FLOWER_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-flower:latest"
