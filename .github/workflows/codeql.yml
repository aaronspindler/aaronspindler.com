name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 5 * * *'  # Runs at 5:30 AM UTC every day

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write  # Required to create commits and PRs
      security-events: write
      pull-requests: write  # Required for Copilot Autofix to post suggestions

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v4

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:${{ matrix.language }}"

  # Job to create PRs and trigger GitHub Copilot Autofix
  autofix:
    name: Create Autofix PRs
    needs: analyze
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: write
      pull-requests: write
      security-events: write  # Required for autofix API
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get CodeQL alerts
      id: get-alerts
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Fetch code scanning alerts
        alerts=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/code-scanning/alerts \
          --jq '[.[] | select(.state == "open" and .tool.name == "CodeQL")]')

        alert_count=$(echo "$alerts" | jq 'length')
        echo "alert-count=$alert_count" >> $GITHUB_OUTPUT

        if [ "$alert_count" -gt 0 ]; then
          echo "has-alerts=true" >> $GITHUB_OUTPUT
          echo "Found $alert_count open CodeQL alerts"

          # Save alert numbers and details
          echo "$alerts" | jq -r '.[].number' > alert_numbers.txt
          echo "$alerts" | jq -r '.[] | "- **\(.rule.description)** (\(.rule.severity))\n  File: \(.most_recent_instance.location.path):\(.most_recent_instance.location.start_line)\n  Message: \(.most_recent_instance.message.text)\n"' > alert_details.txt
        else
          echo "has-alerts=false" >> $GITHUB_OUTPUT
          echo "No open CodeQL alerts found"
        fi

    - name: Create PR for CodeQL fixes
      if: steps.get-alerts.outputs.has-alerts == 'true'
      id: create-pr
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Create a new branch for autofix
        branch_name="codeql-autofix-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$branch_name"

        alert_count="${{ steps.get-alerts.outputs.alert-count }}"

        # Create a marker file to indicate this PR is for CodeQL fixes
        mkdir -p .github/codeql-autofix
        echo "This branch is awaiting automated fix suggestions from GitHub Copilot Autofix." > .github/codeql-autofix/README.md
        echo "" >> .github/codeql-autofix/README.md
        echo "## Detected Issues ($alert_count total)" >> .github/codeql-autofix/README.md
        echo "" >> .github/codeql-autofix/README.md
        cat alert_details.txt >> .github/codeql-autofix/README.md

        git add .github/codeql-autofix/README.md
        git commit -m "docs: CodeQL alerts detected - awaiting autofix suggestions

        This PR is automatically created to address $alert_count CodeQL alert(s).

        GitHub Copilot Autofix will analyze these alerts and provide suggested fixes
        as PR comments. Please review and apply the suggested fixes.

        See the Security tab for detailed information about each alert."

        git push origin "$branch_name"

        # Create PR with detailed body
        pr_body="## üîí CodeQL Security Alerts - Awaiting Autofix

        This PR was automatically created because CodeQL detected **$alert_count** code quality alert(s) in the codebase.

        ### ü§ñ GitHub Copilot Autofix

        GitHub Copilot Autofix has been triggered for all alerts. AI-generated fix suggestions will appear as comments on this PR shortly.

        ### üìã What to do next

        1. Wait for GitHub Copilot to post fix suggestions (usually takes a few minutes)
        2. Review each suggested fix carefully
        3. Accept and commit the suggestions you agree with
        4. Test that the changes don't break anything
        5. Merge this PR once all issues are resolved

        ### üîç Detected Issues

        $(cat alert_details.txt)

        ### üìö Additional Resources

        - [View all alerts in Security tab](https://github.com/${{ github.repository }}/security/code-scanning)
        - [CodeQL documentation](https://codeql.github.com/docs/)
        - [GitHub Copilot Autofix docs](https://docs.github.com/en/code-security/code-scanning/managing-code-scanning-alerts/about-autofix-for-codeql-code-scanning)

        ---
        *This PR was automatically created by the CodeQL workflow on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*"

        pr_url=$(gh pr create \
          --title "üîí Security: Fix $alert_count CodeQL alert(s)" \
          --body "$pr_body" \
          --base main \
          --head "$branch_name" \
          --label "security,codeql,automated")

        pr_number=$(echo "$pr_url" | grep -o '[0-9]*$')
        echo "pr-number=$pr_number" >> $GITHUB_OUTPUT
        echo "pr-url=$pr_url" >> $GITHUB_OUTPUT
        echo "‚úÖ Created PR #$pr_number: $pr_url"

    - name: Trigger GitHub Copilot Autofix for each alert
      if: steps.get-alerts.outputs.has-alerts == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        pr_number="${{ steps.create-pr.outputs.pr-number }}"

        echo "Triggering GitHub Copilot Autofix for all alerts..."
        echo "Fixes will be posted as comments on PR #$pr_number"

        # Read alert numbers and trigger autofix for each
        while IFS= read -r alert_number; do
          echo "Requesting autofix for alert #$alert_number..."

          # Call GitHub API to create autofix
          response=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/code-scanning/alerts/${alert_number}/fixes" \
            -f "pull_request_number=$pr_number" \
            2>&1 || true)

          if echo "$response" | grep -q "error"; then
            echo "‚ö†Ô∏è  Failed to request autofix for alert #$alert_number"
            echo "Response: $response"
          else
            echo "‚úì Autofix requested for alert #$alert_number"
          fi

          # Small delay to avoid rate limiting
          sleep 1
        done < alert_numbers.txt

        echo ""
        echo "‚úÖ Autofix requests completed!"
        echo "GitHub Copilot will analyze the alerts and post fix suggestions to PR #$pr_number"
        echo "PR URL: ${{ steps.create-pr.outputs.pr-url }}"
