name: Reusable Test and Check

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.12.2'
      upload-coverage:
        description: 'Whether to upload coverage to Codecov'
        required: false
        type: boolean
        default: true
      ref:
        description: 'Git ref to checkout (branch, tag, or SHA)'
        required: false
        type: string
        default: ''

env:
  PYTHONUNBUFFERED: 1  # Better logging output

permissions:
  contents: read

jobs:
  test-and-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Increased timeout for Docker operations
    steps:
      - uses: actions/checkout@v5
        with:
          # Use the provided ref if specified, otherwise use default behavior
          ref: ${{ inputs.ref }}
          # Use github.token which has read access to Dependabot PRs
          token: ${{ github.token }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Verify Docker Compose file exists
        run: |
          if [ ! -f docker-compose.test.yml ]; then
            echo "❌ docker-compose.test.yml not found!"
            exit 1
          fi
          echo "✅ docker-compose.test.yml found"
      
      - name: Build Docker images
        run: |
          docker compose -f docker-compose.test.yml build
      
      - name: Start test services
        run: |
          docker compose -f docker-compose.test.yml up -d postgres redis localstack
          # Wait for services to be healthy
          timeout 60s bash -c 'until docker compose -f docker-compose.test.yml ps | grep -q "healthy"; do sleep 2; done'
      
      - name: Set up Python (for local checks)
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-*.txt
      
      - name: Install local dependencies (for checks only)
        run: |
          python -m pip install --upgrade pip
          pip install safety
      
      - name: Security Check
        run: |
          safety check --json || true
        continue-on-error: true
      
      - name: Check Migrations
        run: |
          docker compose -f docker-compose.test.yml run --rm test_runner sh -c "python manage.py makemigrations --check --dry-run --settings=config.settings_test"
      
      - name: Run Django System Checks
        run: |
          docker compose -f docker-compose.test.yml run --rm test_runner sh -c "python manage.py check --deploy --settings=config.settings_test"
      
      - name: Run Tests with Coverage
        run: |
          # Create a directory for coverage output
          mkdir -p ./test_output
          docker compose -f docker-compose.test.yml run --rm -v $(pwd)/test_output:/code/test_output test_runner sh -c "
            echo 'Installing coverage...' &&
            pip install coverage --no-cache-dir &&
            echo 'Running tests with coverage...' &&
            coverage run --source='.' manage.py test --settings=config.settings_test --no-input --parallel --verbosity=2 &&
            coverage report &&
            coverage xml -o /code/test_output/coverage.xml &&
            echo 'Coverage report saved to test_output/coverage.xml'
          "
      
      - name: Move coverage report
        run: |
          # Move coverage report to expected location
          if [ -f ./test_output/coverage.xml ]; then
            cp ./test_output/coverage.xml ./coverage.xml
            echo "Coverage report found and copied"
          else
            echo "Coverage report not found, creating minimal one"
            echo '<?xml version="1.0"?><coverage version="0.0" timestamp="0"></coverage>' > coverage.xml
          fi
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7  # v5.0.2
        if: inputs.upload-coverage
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
      
      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v
          docker system prune -f