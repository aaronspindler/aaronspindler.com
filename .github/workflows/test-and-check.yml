name: Reusable Test and Check

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.12.2'
      postgres-version:
        description: 'PostgreSQL version to use'
        required: false
        type: string
        default: '15'
      upload-coverage:
        description: 'Whether to upload coverage to Codecov'
        required: false
        type: boolean
        default: true
      ref:
        description: 'Git ref to checkout (branch, tag, or SHA)'
        required: false
        type: string
        default: ''
    secrets:
      DATABASE_URL:
        required: false
        description: 'Database URL for tests'

env:
  SECRET_KEY: "FAKE_SECRET_KEY"
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  PYTHONUNBUFFERED: 1  # Better logging output

jobs:
  test-and-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent jobs from hanging
    services:
      postgres:
        image: postgres:${{ inputs.postgres-version }}
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3
    steps:
      - uses: actions/checkout@v5
        with:
          # Use the provided ref if specified, otherwise use default behavior
          ref: ${{ inputs.ref }}
          # Use github.token which has read access to Dependabot PRs
          token: ${{ github.token }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-*.txt
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local
            /opt/hostedtoolcache/Python/*/x64/lib/python*/site-packages
          key: ${{ runner.os }}-pip-${{ inputs.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ inputs.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install coverage safety
      
      - name: Install Node Dependencies
        run: |
          npm ci --prefer-offline --no-audit
      
      - name: Cache static files and built CSS
        uses: actions/cache@v4
        with:
          path: |
            staticfiles/
            static/css/combined.min.*.css
            static/css/combined.min.*.css.gz
            static/css/combined.min.*.css.br
          key: ${{ runner.os }}-static-${{ hashFiles('**/static/**', '**/templates/**', 'pages/management/commands/build_css.py') }}
          restore-keys: |
            ${{ runner.os }}-static-
      
      - name: Cache Django migrations
        uses: actions/cache@v4
        with:
          path: |
            **/migrations/*.pyc
            **/__pycache__/
          key: ${{ runner.os }}-migrations-${{ hashFiles('**/migrations/*.py') }}
          restore-keys: |
            ${{ runner.os }}-migrations-
      
      - name: Security Check
        run: |
          safety check --json || true
        continue-on-error: true
      
      - name: Check Migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        run: |
          python manage.py makemigrations --check --dry-run
      
      - name: Run Django System Checks
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        run: |
          python manage.py check --deploy
      
      - name: Cache test database
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/django_tests
          key: ${{ runner.os }}-testdb-${{ hashFiles('**/migrations/*.py', '**/models.py') }}
          restore-keys: |
            ${{ runner.os }}-testdb-
      
      - name: Run Tests with Coverage
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
          DJANGO_TEST_PROCESSES: 4
        run: |
          coverage run --source='.' --parallel-mode manage.py test --no-input --parallel=4 --verbosity=2
          coverage combine
          coverage report
          coverage xml
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: inputs.upload-coverage
        with:
          files: ./coverage.xml
          fail_ci_if_error: false