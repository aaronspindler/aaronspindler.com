name: Reusable Test and Check

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.12.2'
      upload-coverage:
        description: 'Whether to upload coverage to Codecov'
        required: false
        type: boolean
        default: true
      ref:
        description: 'Git ref to checkout (branch, tag, or SHA)'
        required: false
        type: string
        default: ''
      run-code-quality:
        description: 'Whether to run code quality checks (linting, formatting, type checking)'
        required: false
        type: boolean
        default: true
      run-tests:
        description: 'Whether to run the test suite'
        required: false
        type: boolean
        default: true
      run-django-checks:
        description: 'Whether to run Django system and migration checks'
        required: false
        type: boolean
        default: true

env:
  PYTHONUNBUFFERED: 1
  DOCKER_IMAGE_NAME: test-runner

permissions:
  contents: read

jobs:
  # Build Docker image once and share it with other jobs
  build-docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.run-tests || inputs.run-django-checks
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.ref }}
          token: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
        with:
          driver-opts: |
            network=host

      # Note: Docker layer caching is now handled via GitHub Actions cache in the build step

      - name: Verify Docker Compose file
        run: |
          if [ ! -f docker-compose.test.yml ]; then
            echo "❌ docker-compose.test.yml not found!"
            exit 1
          fi
          echo "✅ docker-compose.test.yml found"

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Save Docker image to file
        run: |
          docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > test-runner-image.tar.gz
          echo "Image size: $(du -h test-runner-image.tar.gz | cut -f1)"
          echo "Available images:"
          docker images | grep test-runner || true

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: docker-image
          path: test-runner-image.tar.gz
          retention-days: 1
          compression-level: 0  # Already compressed

  # Quick security check (no Docker needed)
  security-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.ref }}
          token: ${{ github.token }}

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install and run safety
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        run: |
          python -m pip install --upgrade pip
          pip install safety
          safety scan --json || true
        continue-on-error: false

  # Code quality checks - linting and formatting
  lint-and-format:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.run-code-quality
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.ref }}
          token: ${{ github.token }}

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort pylint pip-audit

      - name: Run Ruff linter
        run: |
          ruff check . --output-format=github
        continue-on-error: true

      - name: Check Black formatting
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .
        continue-on-error: true

      - name: Run Pylint
        run: |
          # Run pylint on Python files, ignoring migrations and venv
          find . -type f -name "*.py" \
            -not -path "./venv/*" \
            -not -path "./migrations/*" \
            -not -path "./.git/*" \
            | xargs pylint --exit-zero --reports=y
        continue-on-error: true

      - name: Security audit with pip-audit
        run: |
          pip-audit --desc
        continue-on-error: true

  # Type checking
  type-checking:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.run-code-quality
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.ref }}
          token: ${{ github.token }}

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy django-stubs

      - name: Run MyPy type checking
        run: |
          mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  # Django checks (parallel matrix)
  django-checks:
    runs-on: ubuntu-latest
    needs: build-docker-image
    timeout-minutes: 10
    if: inputs.run-django-checks
    strategy:
      matrix:
        check: [migrations, system]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.ref }}
          token: ${{ github.token }}

      - name: Download Docker image artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          echo "Loading Docker image..."
          docker load < /tmp/test-runner-image.tar.gz
          docker images | grep test-runner

          # Update docker-compose.test.yml to use the loaded image
          sed -i 's|build: \.|image: test-runner:latest|g' docker-compose.test.yml

      - name: Start required services
        run: |
          docker compose -f docker-compose.test.yml up -d postgres redis
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          timeout 60s bash -c 'until docker compose -f docker-compose.test.yml ps --format json | grep -q "\"Health\":\"healthy\""; do echo "Waiting for services..."; sleep 2; done' || echo "Warning: Services health check timed out"

      - name: Run Django ${{ matrix.check }} check
        run: |
          case "${{ matrix.check }}" in
            migrations)
              docker compose -f docker-compose.test.yml run --rm test_runner \
                python manage.py makemigrations --check --dry-run --settings=config.settings_test
              ;;
            system)
              docker compose -f docker-compose.test.yml run --rm test_runner \
                python manage.py check --deploy --settings=config.settings_test
              ;;
          esac

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  # Test suite split into groups (parallel matrix)
  test-suite:
    runs-on: ubuntu-latest
    needs: build-docker-image
    timeout-minutes: 30  # Increased timeout for memory-intensive tests
    if: inputs.run-tests
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - name: "core"
            apps: "accounts pages config"
          - name: "blog"
            apps: "blog"
          - name: "photos"
            apps: "photos"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.ref }}
          token: ${{ github.token }}

      - name: Download Docker image artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          echo "Loading Docker image..."
          docker load < /tmp/test-runner-image.tar.gz
          docker images | grep test-runner

          # Update docker-compose.test.yml to use the loaded image
          sed -i 's|build: \.|image: test-runner:latest|g' docker-compose.test.yml

      - name: Start test services
        run: |
          docker compose -f docker-compose.test.yml up -d postgres redis localstack
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          timeout 60s bash -c 'until docker compose -f docker-compose.test.yml ps --format json | grep -q "\"Health\":\"healthy\""; do echo "Waiting for services..."; sleep 2; done' || echo "Warning: Services health check timed out"

      - name: Create S3 bucket in LocalStack
        run: |
          echo "Creating S3 bucket in LocalStack..."
          docker compose -f docker-compose.test.yml run --rm test_runner sh -c "
            pip install awscli --no-cache-dir &&
            aws --endpoint-url=http://localstack:4566 s3 mb s3://test-bucket || true &&
            aws --endpoint-url=http://localstack:4566 s3api put-bucket-acl --bucket test-bucket --acl public-read || true &&
            echo 'S3 bucket created successfully'
          "

      - name: Run tests for ${{ matrix.test-group.name }}
        run: |
          mkdir -p ./test_output
          docker compose -f docker-compose.test.yml run --rm \
            -v $(pwd)/test_output:/code/test_output test_runner sh -c "
            pip install coverage --no-cache-dir &&
            export PYTHONDONTWRITEBYTECODE=1 &&
            export PYTHONUNBUFFERED=1 &&
            coverage run --source='.' manage.py test ${{ matrix.test-group.apps }} --settings=config.settings_test --no-input --verbosity=2 &&
            coverage report &&
            coverage xml -o /code/test_output/coverage-${{ matrix.test-group.name }}.xml
          "

      - name: Upload coverage artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: coverage-${{ matrix.test-group.name }}
          path: ./test_output/coverage-${{ matrix.test-group.name }}.xml
          retention-days: 1

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  # Combine and upload coverage
  coverage-upload:
    runs-on: ubuntu-latest
    needs: test-suite
    if: inputs.upload-coverage && inputs.run-tests
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.ref }}
          token: ${{ github.token }}

      - name: Download coverage artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          pattern: coverage-*
          merge-multiple: true
          path: ./coverage-reports

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install coverage
        run: |
          pip install coverage

      - name: Merge coverage files
        run: |
          # List downloaded files for debugging
          ls -la ./coverage-reports/

          # Since we have XML files, we need to use a different approach
          # We'll just concatenate them for Codecov which handles multiple files
          if ls ./coverage-reports/coverage-*.xml 1> /dev/null 2>&1; then
            # Copy all coverage files to current directory for Codecov
            cp ./coverage-reports/coverage-*.xml .
            echo "Found coverage files:"
            ls -la coverage-*.xml
          else
            echo "No coverage files found, creating empty one"
            echo '<?xml version="1.0"?><coverage></coverage>' > coverage.xml
          fi

      - name: Upload to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7  # v5.5.1
        with:
          files: ./coverage-*.xml
          fail_ci_if_error: false
          verbose: true

  # Final check to ensure all jobs passed
  all-checks:
    runs-on: ubuntu-latest
    needs: [build-docker-image, security-check, django-checks, test-suite, lint-and-format, type-checking]
    if: always()
    steps:
      - name: Check if all jobs passed
        run: |
          # Always check security (it always runs)
          SECURITY_STATUS="${{ needs.security-check.result }}"
          if [[ "$SECURITY_STATUS" == "failure" ]]; then
            echo "❌ Security check failed"
            exit 1
          fi

          # Check Docker build if tests or django checks were supposed to run
          if [[ "${{ inputs.run-tests }}" == "true" ]] || [[ "${{ inputs.run-django-checks }}" == "true" ]]; then
            BUILD_STATUS="${{ needs.build-docker-image.result }}"
            if [[ "$BUILD_STATUS" == "failure" ]]; then
              echo "❌ Docker build failed"
              exit 1
            fi
          fi

          # Check Django checks if they were supposed to run
          if [[ "${{ inputs.run-django-checks }}" == "true" ]]; then
            DJANGO_STATUS="${{ needs.django-checks.result }}"
            if [[ "$DJANGO_STATUS" == "failure" ]]; then
              echo "❌ Django checks failed"
              exit 1
            fi
          fi

          # Check test suite if it was supposed to run
          if [[ "${{ inputs.run-tests }}" == "true" ]]; then
            TEST_STATUS="${{ needs.test-suite.result }}"
            if [[ "$TEST_STATUS" == "failure" ]]; then
              echo "❌ Test suite failed"
              exit 1
            fi
          fi

          # Check code quality jobs if they were supposed to run
          if [[ "${{ inputs.run-code-quality }}" == "true" ]]; then
            LINT_STATUS="${{ needs.lint-and-format.result }}"
            TYPE_STATUS="${{ needs.type-checking.result }}"

            if [[ "$LINT_STATUS" == "failure" ]] || [[ "$TYPE_STATUS" == "failure" ]]; then
              echo "❌ Code quality checks failed"
              exit 1
            fi
          fi

          echo "✅ All enabled checks passed successfully!"
