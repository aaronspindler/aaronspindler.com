name: CD - Build and Deploy

on:
  workflow_run:
    workflows: ["CI - Tests"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:

# Do NOT cancel in-progress builds/deployments for safety and to avoid wasting CI minutes
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

permissions:
  contents: read

jobs:
  # Build Docker images after tests pass
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Only run if the triggering workflow succeeded or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - service: web
            dockerfile: Dockerfile
          - service: celery
            dockerfile: celery.Dockerfile
          - service: celerybeat
            dockerfile: celerybeat.Dockerfile
          - service: flower
            dockerfile: flower.Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
        with:
          driver-opts: |
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false
          sbom: false

  # Deploy to CapRover after successful build
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 2

      - name: Check for Flower changes
        id: flower-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '(flower\.Dockerfile|requirements\.txt|config/celery\.py|captain-definition-flower)'; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üå∏ Flower-related files changed, will deploy Flower"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No Flower-related changes, skipping Flower deployment"
          fi

      - name: Deploy Web to CapRover
        id: deploy-web
        continue-on-error: true
        run: |
          echo "üöÄ Deploying Web service to CapRover..."
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_WEB_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_WEB_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-web:latest"

      - name: Deploy Celery to CapRover
        id: deploy-celery
        continue-on-error: true
        run: |
          echo "üîß Deploying Celery worker to CapRover..."
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_CELERY_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_CELERY_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-celery:latest"

      - name: Deploy Celery Beat to CapRover
        id: deploy-celerybeat
        continue-on-error: true
        run: |
          echo "‚è∞ Deploying Celery Beat to CapRover..."
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_CELERYBEAT_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_CELERYBEAT_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-celerybeat:latest"

      - name: Deploy Flower to CapRover
        id: deploy-flower
        if: steps.flower-changes.outputs.changed == 'true'
        continue-on-error: true
        run: |
          echo "üå∏ Deploying Flower monitoring to CapRover..."
          docker run caprover/cli-caprover:latest caprover deploy \
            --caproverUrl "${{ secrets.CAPROVER_SERVER }}" \
            --appToken "${{ secrets.CAPROVER_FLOWER_APP_TOKEN }}" \
            --appName "${{ secrets.CAPROVER_FLOWER_APP_NAME }}" \
            --imageName "${{ env.REGISTRY }}/${{ github.repository }}-flower:latest"

      - name: Deployment Summary and Status Check
        if: always()
        run: |
          echo "============================="
          echo "üìä Deployment Summary"
          echo "============================="

          # Track deployment outcomes
          FAILED_DEPLOYMENTS=0
          SUCCESSFUL_DEPLOYMENTS=0

          # Check Web deployment
          if [[ "${{ steps.deploy-web.outcome }}" == "success" ]]; then
            echo "‚úÖ Web: ${{ secrets.CAPROVER_WEB_APP_NAME }}"
            ((SUCCESSFUL_DEPLOYMENTS++))
          else
            echo "‚ùå Web: ${{ secrets.CAPROVER_WEB_APP_NAME }} (failed)"
            ((FAILED_DEPLOYMENTS++))
          fi

          # Check Celery deployment
          if [[ "${{ steps.deploy-celery.outcome }}" == "success" ]]; then
            echo "‚úÖ Celery: ${{ secrets.CAPROVER_CELERY_APP_NAME }}"
            ((SUCCESSFUL_DEPLOYMENTS++))
          else
            echo "‚ùå Celery: ${{ secrets.CAPROVER_CELERY_APP_NAME }} (failed)"
            ((FAILED_DEPLOYMENTS++))
          fi

          # Check Celery Beat deployment
          if [[ "${{ steps.deploy-celerybeat.outcome }}" == "success" ]]; then
            echo "‚úÖ Celery Beat: ${{ secrets.CAPROVER_CELERYBEAT_APP_NAME }}"
            ((SUCCESSFUL_DEPLOYMENTS++))
          else
            echo "‚ùå Celery Beat: ${{ secrets.CAPROVER_CELERYBEAT_APP_NAME }} (failed)"
            ((FAILED_DEPLOYMENTS++))
          fi

          # Check Flower deployment (only if it was supposed to run)
          if [[ "${{ steps.flower-changes.outputs.changed }}" == "true" ]]; then
            if [[ "${{ steps.deploy-flower.outcome }}" == "success" ]]; then
              echo "‚úÖ Flower: ${{ secrets.CAPROVER_FLOWER_APP_NAME }}"
              ((SUCCESSFUL_DEPLOYMENTS++))
            else
              echo "‚ùå Flower: ${{ secrets.CAPROVER_FLOWER_APP_NAME }} (failed)"
              ((FAILED_DEPLOYMENTS++))
            fi
          else
            echo "‚è≠Ô∏è  Flower: (skipped - no changes)"
          fi

          echo ""
          echo "Summary: $SUCCESSFUL_DEPLOYMENTS succeeded, $FAILED_DEPLOYMENTS failed"
          echo "Check CapRover dashboard for details"

          # Fail the workflow if all deployments failed
          TOTAL_DEPLOYMENTS=$((SUCCESSFUL_DEPLOYMENTS + FAILED_DEPLOYMENTS))
          if [[ $TOTAL_DEPLOYMENTS -gt 0 ]] && [[ $SUCCESSFUL_DEPLOYMENTS -eq 0 ]]; then
            echo ""
            echo "‚ùå All deployments failed!"
            exit 1
          fi

          # Warn if any deployments failed
          if [[ $FAILED_DEPLOYMENTS -gt 0 ]]; then
            echo ""
            echo "‚ö†Ô∏è  Some deployments failed, but at least one succeeded"
          fi
