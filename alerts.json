[{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/406","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/406/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":30,"end_line":193,"path":"blog/management/commands/generate_knowledge_graph_screenshot.py","start_column":29,"start_line":188},"message":{"text":"This statement is unreachable."},"ref":"refs/heads/main","state":"open"},"number":406,"rule":{"description":"Unreachable code","full_description":"Code is unreachable","help":"# Unreachable code\nUnreachable code makes the code more difficult to understand and may slow down loading of modules.\n\n\n## Recommendation\nDeleting the unreachable code will make the code clearer and preserve the meaning of the code. However, it is possible that the original intention was that the code should execute and that it is unreachable signifies some other error.\n\n\n## Example\nIn this example the assignment to `remainder` is never reached because there is a ` return` statement on the previous line.\n\n\n```python\nimport math\n\ndef my_div(x, y):\n    return math.floor(x / y)\n    remainder = x - math.floor(x / y) * y\n\n```\n\n## References\n* Wikipedia: [Unreachable Code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n","id":"py/unreachable-statement","name":"py/unreachable-statement","severity":"warning","tags":["external/cwe/cwe-561","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/406"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/405","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/405/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":20,"end_line":167,"path":"config/settings.py","start_column":19,"start_line":167},"message":{"text":"Syntax Error (in Python 3)."},"ref":"refs/heads/main","state":"open"},"number":405,"rule":{"description":"Syntax error","full_description":"Syntax errors cause failures at runtime and prevent analysis of the code.","help":"# Syntax error\nSyntax errors prevent a module being evaluated and thus imported. An attempt to import a module with invalid syntax will fail; a `SyntaxError` will be raised.\n\nA common cause of syntax errors is the difference in syntax between Python 2 and Python 3. In particular, a syntax error may be alerted if a Python 3 file is assumed to be compatible with Python 2 (or vice versa). Explicitly specifying the expected Python version can help prevent this.\n\nThe existence of a syntax error in a module may suggest other problems as well. Either the module is never imported in practice and could be deleted or a `try` statement around the import is mistakenly discarding the `SyntaxError`.\n\n\n## Recommendation\nFixing the syntax error is the obvious fix. However, it is worth investigating why a module containing a syntax error was able to persist and address that problem as well.\n\nIf you suspect that the syntax error is caused by the analysis using the wrong version of Python, consider specifying the version explicitly. When you run code scanning using the CodeQL action, you can configure the Python version to use. For more information, see [Analyzing Python dependencies](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#analyzing-python-dependencies).\n\n\n## References\n* Python Tutorial: [SyntaxErrors.](http://docs.python.org/tutorial/errors.html#syntax-errors)\n","id":"py/syntax-error","name":"py/syntax-error","severity":"error","tags":["correctness","quality","reliability"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/405"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/404","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/404/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":16,"end_line":97,"path":"config/settings_test.py","start_column":5,"start_line":97},"message":{"text":"The global variable 'STATIC_ROOT' is not used."},"ref":"refs/heads/main","state":"open"},"number":404,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/404"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/403","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/403/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":15,"end_line":95,"path":"config/settings_test.py","start_column":5,"start_line":95},"message":{"text":"The global variable 'MEDIA_ROOT' is not used."},"ref":"refs/heads/main","state":"open"},"number":403,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/403"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/402","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/402/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":25,"end_line":70,"path":"config/settings_test.py","start_column":5,"start_line":70},"message":{"text":"The global variable 'AWS_S3_CUSTOM_DOMAIN' is not used."},"ref":"refs/heads/main","state":"open"},"number":402,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/402"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/401","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/401/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":23,"end_line":67,"path":"config/settings_test.py","start_column":5,"start_line":67},"message":{"text":"The global variable 'AWS_S3_REGION_NAME' is not used."},"ref":"refs/heads/main","state":"open"},"number":401,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/401"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/400","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/400/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":26,"end_line":65,"path":"config/settings_test.py","start_column":5,"start_line":65},"message":{"text":"The global variable 'AWS_SECRET_ACCESS_KEY' is not used."},"ref":"refs/heads/main","state":"open"},"number":400,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/400"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/399","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/399/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":22,"end_line":64,"path":"config/settings_test.py","start_column":5,"start_line":64},"message":{"text":"The global variable 'AWS_ACCESS_KEY_ID' is not used."},"ref":"refs/heads/main","state":"open"},"number":399,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/399"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/398","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/398/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":18,"end_line":61,"path":"config/settings_test.py","start_column":5,"start_line":61},"message":{"text":"The global variable 'AWS_S3_VERIFY' is not used."},"ref":"refs/heads/main","state":"open"},"number":398,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/398"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/397","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/397/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":19,"end_line":60,"path":"config/settings_test.py","start_column":5,"start_line":60},"message":{"text":"The global variable 'AWS_S3_USE_SSL' is not used."},"ref":"refs/heads/main","state":"open"},"number":397,"rule":{"description":"Unused global variable","full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-global-variable","name":"py/unused-global-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/397"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/396","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/396/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":18,"end_line":203,"path":"blog/tests/test_views.py","start_column":9,"start_line":203},"message":{"text":"Variable _response is not used."},"ref":"refs/heads/main","state":"open"},"number":396,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/396"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/395","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/395/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":34,"end_line":313,"path":"photos/tests/test_tasks.py","start_column":13,"start_line":313},"message":{"text":"Variable _track_optimized_read is not used."},"ref":"refs/heads/main","state":"open"},"number":395,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/395"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/394","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/394/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":18,"end_line":769,"path":"photos/tests/test_image_utils.py","start_column":9,"start_line":769},"message":{"text":"Variable _existing is not used."},"ref":"refs/heads/main","state":"open"},"number":394,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/394"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/393","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/393/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":19,"end_line":737,"path":"photos/tests/test_image_utils.py","start_column":9,"start_line":737},"message":{"text":"Variable _existing2 is not used."},"ref":"refs/heads/main","state":"open"},"number":393,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/393"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/392","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/392/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":19,"end_line":714,"path":"photos/tests/test_image_utils.py","start_column":9,"start_line":714},"message":{"text":"Variable _existing2 is not used."},"ref":"refs/heads/main","state":"open"},"number":392,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/392"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/391","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/391/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":16,"end_line":299,"path":"blog/tests/test_knowledge_graph.py","start_column":9,"start_line":299},"message":{"text":"Variable _result is not used."},"ref":"refs/heads/main","state":"open"},"number":391,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/391"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/390","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/390/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":18,"end_line":186,"path":"blog/tests/test_integration.py","start_column":9,"start_line":186},"message":{"text":"Variable _response is not used."},"ref":"refs/heads/main","state":"open"},"number":390,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/390"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/389","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/389/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":18,"end_line":131,"path":"photos/tests/test_image_utils.py","start_column":9,"start_line":131},"message":{"text":"Variable _json_str is not used."},"ref":"refs/heads/main","state":"open"},"number":389,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/389"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/388","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/388/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":17,"end_line":112,"path":"pages/tests/test_context_processors.py","start_column":9,"start_line":112},"message":{"text":"Variable _context is not used."},"ref":"refs/heads/main","state":"open"},"number":388,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/388"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/387","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/387/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":24,"end_line":32,"path":"photos/management/commands/generate_album_zips.py","start_column":17,"start_line":32},"message":{"text":"Variable _result is not used."},"ref":"refs/heads/main","state":"open"},"number":387,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/387"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/386","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/386/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":20,"end_line":379,"path":"pages/management/commands/build_css.py","start_column":13,"start_line":379},"message":{"text":"Variable _result is not used."},"ref":"refs/heads/main","state":"open"},"number":386,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/386"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/385","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/385/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":14,"end_line":52,"path":"utils/migrations/0005_migrate_searchable_content_data.py","start_column":5,"start_line":52},"message":{"text":"Variable _db_alias is not used."},"ref":"refs/heads/main","state":"open"},"number":385,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/385"},{"assignees":[],"created_at":"2025-10-15T01:59:56Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/384","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/384/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":14,"end_line":13,"path":"utils/migrations/0005_migrate_searchable_content_data.py","start_column":5,"start_line":13},"message":{"text":"Variable _db_alias is not used."},"ref":"refs/heads/main","state":"open"},"number":384,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/384"},{"assignees":[],"created_at":"2025-10-15T01:14:23Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/383","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/383/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"47da785375462a7732866815cbb46d7ac50e291c","environment":"{\"language\":\"python\"}","location":{"end_column":13,"end_line":52,"path":"utils/migrations/0005_migrate_searchable_content_data.py","start_column":5,"start_line":52},"message":{"text":"Variable db_alias is not used."},"ref":"refs/heads/main","state":"fixed"},"number":383,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/383"},{"assignees":[],"created_at":"2025-10-15T01:14:23Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/382","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/382/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"47da785375462a7732866815cbb46d7ac50e291c","environment":"{\"language\":\"python\"}","location":{"end_column":13,"end_line":13,"path":"utils/migrations/0005_migrate_searchable_content_data.py","start_column":5,"start_line":13},"message":{"text":"Variable db_alias is not used."},"ref":"refs/heads/main","state":"fixed"},"number":382,"rule":{"description":"Unused local variable","full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n","id":"py/unused-local-variable","name":"py/unused-local-variable","severity":"note","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/382"},{"assignees":[],"created_at":"2025-10-15T01:14:23Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/381","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/381/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":["test"],"commit_sha":"47da785375462a7732866815cbb46d7ac50e291c","environment":"{\"language\":\"python\"}","location":{"end_column":110,"end_line":165,"path":"utils/tests/test_search.py","start_column":9,"start_line":165},"message":{"text":"assertTrue(a in b) cannot provide an informative message. Using assertIn(a, b) instead will give more informative messages."},"ref":"refs/heads/main","state":"fixed"},"number":381,"rule":{"description":"Imprecise assert","full_description":"Using 'assertTrue' or 'assertFalse' rather than a more specific assertion can give uninformative failure messages.","help":"# Imprecise assert\nThe class `unittest.TestCase` provides a range of assertion methods. As well as the general forms `assertTrue()` and `assertFalse()` more specific forms such as `assertGreaterEquals()` and `assertNotIn()` are provided. By using the more specific forms it is possible to get more precise and informative failure messages in the event of a test failing. This can speed up the debugging process.\n\n\n## Recommendation\nReplace all calls to `assertTrue()` and `assertFalse()` that do not provide a custom failure message with a more specific variant. Alternatively, provide a tailored failure message using the `assertTrue(condition, message)` form.\n\n\n## Example\nIn this example, `assertTrue()` and `assertFalse()` are used.\n\n\n```python\nfrom unittest import TestCase\n\nclass MyTest(TestCase):\n    \n    \n    def testInts(self):\n        self.assertTrue(1 == 1)\n        self.assertFalse(1 \u003e 2)\n        self.assertTrue(1 in []) #This will fail\n\n```\nThis will make it more difficult to determine what has gone wrong when `self.assertTrue(1 in [])` fails. The failure message \"AssertionError: False is not true\" is not very helpful.\n\nA more useful error message can be generated by changing the asserts to the more specific forms as in the following example.\n\n\n```python\nfrom unittest import TestCase\n\nclass MyTest(TestCase):\n    \n    \n    def testInts(self):\n        self.assertEqual(1, 1)\n        self.assertLessEqual(1, 2)\n        self.assertIn(1, []) #This will fail\n\n```\nIn this case, the failure message \"AssertionError: 1 not found in \\[\\]\" is much more informative.\n\n\n## References\n* Python library reference: [TestCase.assertEqual](https://docs.python.org/library/unittest.html#unittest.TestCase.assertEqual).\n","id":"py/imprecise-assert","name":"py/imprecise-assert","severity":"note","tags":["maintainability","quality","readability"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/381"},{"assignees":[],"created_at":"2025-10-15T00:21:08Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/380","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/380/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"47da785375462a7732866815cbb46d7ac50e291c","environment":"{\"language\":\"python\"}","location":{"end_column":9,"end_line":5,"path":"accounts/models.py","start_column":5,"start_line":5},"message":{"text":"Unnecessary 'pass' statement."},"ref":"refs/heads/main","state":"fixed"},"number":380,"rule":{"description":"Unnecessary pass","full_description":"Unnecessary 'pass' statement","help":"# Unnecessary pass\nA `pass` statement is only necessary when it is the only statement in a block (the list of statements forming part of a compound statement). This is because the purpose of the ` pass` statement is to allow empty blocks where they would otherwise be syntactically invalid. If the block already contains other statements then the `pass` statement is unnecessary.\n\n\n## Recommendation\nRemove the `pass` statement.\n\n\n## References\n* Python: [pass](http://docs.python.org/2/tutorial/controlflow.html#pass-statements).\n","id":"py/unnecessary-pass","name":"py/unnecessary-pass","severity":"warning","tags":["maintainability","quality","useless-code"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/380"},{"assignees":[],"created_at":"2025-10-15T00:21:08Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/379","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/379/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"47da785375462a7732866815cbb46d7ac50e291c","environment":"{\"language\":\"python\"}","location":{"end_column":45,"end_line":187,"path":"photos/admin.py","start_column":9,"start_line":187},"message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"ref":"refs/heads/main","state":"fixed"},"number":379,"rule":{"description":"Empty except","full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n","id":"py/empty-except","name":"py/empty-except","severity":"note","tags":["error-handling","external/cwe/cwe-390","quality","reliability"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:59:56Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/379"},{"assignees":[],"created_at":"2025-10-15T00:21:08Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/378","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/378/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":20,"end_line":294,"path":"blog/admin.py","start_column":13,"start_line":294},"message":{"text":"Except block directly handles BaseException."},"ref":"refs/heads/main","state":"open"},"number":378,"rule":{"description":"Except block handles 'BaseException'","full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n","id":"py/catch-base-exception","name":"py/catch-base-exception","severity":"note","tags":["error-handling","external/cwe/cwe-396","quality","reliability"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:28:22Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/378"},{"assignees":[],"created_at":"2025-10-15T00:21:08Z","dismissal_approved_by":null,"dismissed_at":null,"dismissed_by":null,"dismissed_comment":null,"dismissed_reason":null,"fixed_at":null,"html_url":"https://github.com/aaronspindler/aaronspindler.com/security/code-scanning/377","instances_url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/377/instances","most_recent_instance":{"analysis_key":".github/workflows/codeql.yml:analyze","category":"/language:python","classifications":[],"commit_sha":"dbfa9121ca9dcac7d5fc07023968ca4b0dede752","environment":"{\"language\":\"python\"}","location":{"end_column":20,"end_line":342,"path":"photos/admin.py","start_column":13,"start_line":342},"message":{"text":"Except block directly handles BaseException."},"ref":"refs/heads/main","state":"open"},"number":377,"rule":{"description":"Except block handles 'BaseException'","full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n","id":"py/catch-base-exception","name":"py/catch-base-exception","severity":"note","tags":["error-handling","external/cwe/cwe-396","quality","reliability"]},"state":"open","tool":{"guid":null,"name":"CodeQL","version":"2.23.2"},"updated_at":"2025-10-15T01:28:22Z","url":"https://api.github.com/repos/aaronspindler/aaronspindler.com/code-scanning/alerts/377"}]
